Sketch.ino
#include <Arduino.h>
#include "TM1637Display.h"
#include "Keyboard4x4.h"

// Пины подключения клавиатуры
int rowPins[4] = {9, 8, 7, 6};  // Пины строк
int colPins[4] = {5, 4, 3, 2};  // Пины столбцов

// Подключение дисплея
#define CLK 50
#define DIO 52

TM1637Display display(CLK, DIO);
Keyboard4x4 keyboard(rowPins, colPins);

// Функция для отображения символов на дисплее
uint8_t charToSegment(char key) {
    // Проверка, является ли символ цифрой
    if (key >= '0' && key <= '9') {
        return display.encodeDigit(key - '0');  // Используем встроенную функцию для цифр
    }
    
    // Обработка букв и символов
    switch (key) {
        case 'A': return SEG_A | SEG_B | SEG_C | SEG_E | SEG_F | SEG_G;  // A
        case 'B': return SEG_C | SEG_D | SEG_E | SEG_F | SEG_G;  // B
        case 'C': return SEG_A | SEG_D | SEG_E | SEG_F;  // C
        case 'D': return SEG_A | SEG_B | SEG_C | SEG_D | SEG_E | SEG_F;  // D
        case '*': return SEG_E | SEG_F | SEG_G;  // *
        case '#': return SEG_A | SEG_B | SEG_D | SEG_E;  // #
        default: return 0x00;  // Пустой сегмент для нераспознанных символов
    }
}

void setup() {
    display.setBrightness(0x0f);  // Максимальная яркость дисплея
}

void loop() {
    char key = keyboard.getKey();  // Чтение нажатой клавиши
    
    if (key != 0) {  // Если клавиша была нажата
        uint8_t segmentValue = charToSegment(key);  // Получаем значение сегмента для нажатой клавиши
        uint8_t data[] = {segmentValue, 0, 0, 0};  // Установка сегментов на дисплее
        display.setSegments(data);  // Установка сегментов на дисплее
        delay(200);  // Небольшая задержка, чтобы избежать дребезга
    }
}



Keyboard4x4.h
// Keyboard4x4.h
#ifndef Keyboard4x4_h
#define Keyboard4x4_h

#include <Arduino.h>

class Keyboard4x4 {
  public:
    Keyboard4x4(int* rowPins, int* colPins);  // Конструктор принимает пины строк и столбцов
    char getKey();  // Метод для получения нажатой клавиши

  private:
    int* _rowPins;
    int* _colPins;
    char _keymap[4][4] = {  // Матрица символов для каждой клавиши
      {'1', '2', '3', 'A'},
      {'4', '5', '6', 'B'},
      {'7', '8', '9', 'C'},
      {'*', '0', '#', 'D'}
    };
};

#endif

Keyboard4x4.cpp
// Keyboard4x4.cpp
#include "Keyboard4x4.h"

Keyboard4x4::Keyboard4x4(int* rowPins, int* colPins) {
  _rowPins = rowPins;
  _colPins = colPins;
  
  // Установка пинов строк как выходы
  for (int i = 0; i < 4; i++) {
    pinMode(_rowPins[i], OUTPUT);
    digitalWrite(_rowPins[i], HIGH);
  }

  // Установка пинов столбцов как входы
  for (int i = 0; i < 4; i++) {
    pinMode(_colPins[i], INPUT_PULLUP);
  }
}

char Keyboard4x4::getKey() {
  // Проход по строкам
  for (int row = 0; row < 4; row++) {
    digitalWrite(_rowPins[row], LOW);  // Активируем строку
    for (int col = 0; col < 4; col++) {
      if (digitalRead(_colPins[col]) == LOW) {  // Если клавиша нажата
        while (digitalRead(_colPins[col]) == LOW);  // Ждем, пока отпустят кнопку
        digitalWrite(_rowPins[row], HIGH);
        return _keymap[row][col];  // Возвращаем символ
      }
    }
    digitalWrite(_rowPins[row], HIGH);  // Деактивируем строку
  }
  return 0;  // Если ничего не нажато
}
